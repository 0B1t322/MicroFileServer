// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroFileServerClient is the client API for MicroFileServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroFileServerClient interface {
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileResp, error)
}

type microFileServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroFileServerClient(cc grpc.ClientConnInterface) MicroFileServerClient {
	return &microFileServerClient{cc}
}

func (c *microFileServerClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileResp, error) {
	out := new(DeleteFileResp)
	err := c.cc.Invoke(ctx, "/MicroFileServer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroFileServerServer is the server API for MicroFileServer service.
// All implementations must embed UnimplementedMicroFileServerServer
// for forward compatibility
type MicroFileServerServer interface {
	DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileResp, error)
	mustEmbedUnimplementedMicroFileServerServer()
}

// UnimplementedMicroFileServerServer must be embedded to have forward compatible implementations.
type UnimplementedMicroFileServerServer struct {
}

func (UnimplementedMicroFileServerServer) DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedMicroFileServerServer) mustEmbedUnimplementedMicroFileServerServer() {}

// UnsafeMicroFileServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroFileServerServer will
// result in compilation errors.
type UnsafeMicroFileServerServer interface {
	mustEmbedUnimplementedMicroFileServerServer()
}

func RegisterMicroFileServerServer(s grpc.ServiceRegistrar, srv MicroFileServerServer) {
	s.RegisterService(&MicroFileServer_ServiceDesc, srv)
}

func _MicroFileServer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroFileServerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MicroFileServer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroFileServerServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MicroFileServer_ServiceDesc is the grpc.ServiceDesc for MicroFileServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicroFileServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MicroFileServer",
	HandlerType: (*MicroFileServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFile",
			Handler:    _MicroFileServer_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/files.proto",
}
