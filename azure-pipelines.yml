name: $(BuildID)-$(Build.SourceBranchName)

trigger:
  branches:
    include:
      - "*"
  tags:
    include:
      - "*"
resources:
- repo: self

variables:
  CGO_ENABLED: 0
  GOOS: linux
  ${{ if notIn(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/tags/develop') }}:
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranch'], 'refs/tags/develop') }}:
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_mfs
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab_mfs

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Go@0
      displayName: build
      inputs:
        command: 'build'
        arguments: '-a -installsuffix cgo -o $(Build.ArtifactStagingDirectory)/main -v'
        workingDirectory: 'api'
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'deploy'
        Contents: 'Dockerfile'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: itlab-mfs-build
- stage: buildImage
  condition: and(succeeded(), ${{variables.buildImage}})
  displayName: Pack docker image
  jobs:
  - job: build
    displayName: Build
    steps:
    - download: current
      artifact: itlab-mfs-build
    - task: Docker@2
      displayName: Publish to docker hub
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: 'rtuitlab/mfs'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/itlab-mfs-build/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/itlab-mfs-build'
        tags: ${{variables.ImageTags}}
    - task: Docker@2
      displayName: Publish to private docker registry
      inputs:
        containerRegistry: 'private rtuitlab registry'
        repository: 'rtuitlab/mfs'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/itlab-mfs-build/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/itlab-mfs-build'
        tags: ${{variables.ImageTags}}
- stage: deploy
  displayName: Deploy
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: ${{variables.deployEnvironment}}
      strategy:
        runOnce:
          deploy:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service update --image registry.rtuitlab.dev/rtuitlab/mfs:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                  readyTimeout: '20000'
